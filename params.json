{"name":"PHP Code Generator","tagline":"She is Goddess, she is the Creator.","body":"# PHP Code Generator\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/asika/php-code-generator/v/stable.svg)](https://packagist.org/packages/asika/php-code-generator) [![Total Downloads](https://poser.pugx.org/asika/php-code-generator/downloads.svg)](https://packagist.org/packages/asika/php-code-generator) [![Latest Unstable Version](https://poser.pugx.org/asika/php-code-generator/v/unstable.svg)](https://packagist.org/packages/asika/php-code-generator) [![License](https://poser.pugx.org/asika/php-code-generator/license.svg)](https://packagist.org/packages/asika/php-code-generator)\r\n\r\nA powerful php scaffolding framework, help developers generate their code by custom templates.\r\n\r\n## Installation via Composer\r\n\r\nAdd this dependency in your `composer.json`.\r\n\r\n``` json\r\n{\r\n    \"require\": {\r\n        \"asika/php-code-generator\": \"2.*\",\r\n        \"windwalker/console\": \"~2.0\"\r\n    }\r\n}\r\n```\r\n\r\nOr just create a project:\r\n\r\n``` shell\r\nphp composer.phar create-project asika/php-code-generator php-code-generator 2.*\r\n```\r\n\r\n## Getting Started\r\n\r\nPHP Code Generator is a command line based program, we will do everything though CLI. Please type:\r\n\r\n``` shell\r\nphp bin/generator\r\n```\r\n\r\nYou will get this help message:\r\n\r\n```\r\nPHP Code Generator - version: 2\r\n------------------------------------------------------------\r\n\r\n[generator Help]\r\n\r\nThe default application command\r\n\r\nUsage:\r\n  generator <command> [option]\r\n\r\n\r\nOptions:\r\n\r\n  -h | --help       Display this help message.\r\n  -q | --quiet      Do not output any message.\r\n  -v | --verbose    Increase the verbosity of messages.\r\n  --ansi            Set 'off' to suppress ANSI colors on unsupported terminals.\r\n  -p | --path       Dest path.\r\n  -t | --tmpl       Sub template name.\r\n\r\nCommands:\r\n\r\n  gen             Genarate operation.\r\n  tmpl-init       Init a new template.\r\n  tmpl-convert    Convert a directory and files back to a template.\r\n```\r\n\r\n### Generate code by Acme Template\r\n\r\nAcme template is a default template in PHP Code Generator, generating code is very easy, please type:\r\n\r\n``` bash\r\nphp bin/generator gen acme test/MyApp\r\n```\r\n\r\nNow you will see message like below:\r\n\r\n``` bash\r\n$ php bin/generator gen acme test/MyApp\r\nFile created: /var/www/php-code-generator/test/MyApp/admin/article/edit.twig\r\nFile created: /var/www/php-code-generator/test/MyApp/admin/article/index.twig\r\nFile created: /var/www/php-code-generator/test/MyApp/admin/category/edit.twig\r\nFile created: /var/www/php-code-generator/test/MyApp/admin/category/index.twig\r\nFile created: /var/www/php-code-generator/test/MyApp/article.twig\r\nFile created: /var/www/php-code-generator/test/MyApp/global/index.html\r\nFile created: /var/www/php-code-generator/test/MyApp/index.html\r\nFile created: /var/www/php-code-generator/test/MyApp/index.twig\r\n```\r\n\r\n### Put your SubTemplate to Acme Template\r\n\r\nNow you can put your code to `src/AcmeTemplate/Template/mytmpl`.\r\n\r\nAnd using this command to generate your sub template:\r\n\r\n``` bash\r\nphp bin/generator gen acme test/MyApp2 -t mytmpl\r\n```\r\n\r\n## Create your project template\r\n\r\nNow everything is very easy, but how can we create our own template? We have to write some code to configure paths and variables.\r\n\r\n### Init a sample template\r\n\r\nUsing this command to init a new template.\r\n\r\n``` bash\r\nphp bin/generator tmpl-init flower\r\n```\r\n\r\n```\r\nFile created: /var/www/php-code-generator/src/FlowerTemplate/Action/ConvertAction.php\r\nFile created: /var/www/php-code-generator/src/FlowerTemplate/Action/CopyAllAction.php\r\nFile created: /var/www/php-code-generator/src/FlowerTemplate/Task/Convert.php\r\nFile created: /var/www/php-code-generator/src/FlowerTemplate/Task/Generate.php\r\nFile created: /var/www/php-code-generator/src/FlowerTemplate/Template/default/DefaultClass.php\r\nFile created: /var/www/php-code-generator/src/FlowerTemplate/FlowerTemplate.php\r\n```\r\n\r\nOK, we created a sample template named `flower`, this template will locate at `src/FlowerTemplate` with an entry class `FlowerTemplate`,\r\nactually you can create it manually, but this will be a little complex, so we are better using the sample first.\r\n\r\n### Configure Variable and Paths\r\n\r\nOpen `FlowerTemplate`, you can set replaced string and copy path here:\r\n\r\n#### Register replacing variables\r\n\r\n``` php\r\nprotected $tagVariable = array('{@', '@}');\r\n\r\nprotected function registerReplaces($io, $replace = array())\r\n{\r\n    $item = $io->getOption('n', 'sakura');\r\n\r\n    /*\r\n     * Replace with your code name.\r\n     */\r\n\r\n    // Set item name, default is sakura\r\n    $replace['item.lower'] = strtolower($item);\r\n    $replace['item.upper'] = strtoupper($item);\r\n    $replace['item.cap']   = ucfirst($item);\r\n\r\n    // Set project name\r\n    $replace['project.class'] = 'CodeGenerator';\r\n\r\n    return $replace;\r\n}\r\n```\r\n\r\nThis example means we can type `-n {item}` to be a variable name. And in template code,\r\nthe `{@item.lower@}` /`{@item.upper@}` /`{@item.cap@}` will be replace to the item name.\r\n\r\n`sakura` is the default value if you don't give the `-n` param. This is an example that if `-n` not found,\r\njust exit and notice user type this param:\r\n\r\n``` php\r\n$item = $io->getOption('n') ? : exit('Please give me item using \"-n {item_name}\"');\r\n```\r\n\r\nYou can add many string to `$replace` array, remember you will need each lower, upper and capital cases, and don't forget to return it.\r\n\r\n#### Register Config & Paths\r\n\r\n``` php\r\nprotected function registerConfig($io, $config)\r\n{\r\n    /*\r\n     * Replace with your project path.\r\n     */\r\n\r\n    $subTemplate = $io->getOption('t', 'default');\r\n    $dest        = $io->getArgument(1) ? : 'generated';\r\n\r\n    $config['path.src']  = __DIR__ . '/Template/' . $subTemplate;\r\n    $config['path.dest'] = GENERATOR_PATH . '/' . $dest;\r\n\r\n    return $config;\r\n}\r\n```\r\n\r\nYou can set some useful config in this method, the most important is `path.src` and `path.dest`. These two config tell PHP Code Generator\r\n  where code from and where code copied to.\r\n\r\n`GENERATOR_PATH` is root path of PHP Code Generator, and the `$io->getArgument(1)` means get second argument of your command(First is 0).\r\n\r\n### Task & Action\r\n\r\nWe have two default task controller, `Generate` and `Convert`.\r\n\r\nGenerate task does the code generate action, and Convert task can help us convert code back to a template.\r\nIn task controller we can using `doAction()` to execute some different action to do something we want to do.\r\n\r\nThe `Generate` controller class:\r\n\r\n``` php\r\nnamespace FlowerTemplate\\Task;\r\n\r\nuse FlowerTemplate\\Action;\r\nuse CodeGenerator\\Controller\\AbstractTaskController;\r\n\r\nclass Generate extends AbstractTaskController\r\n{\r\n\tpublic function execute()\r\n\t{\r\n\t\t$this->doAction(new Action\\CopyAllAction);\r\n\t}\r\n}\r\n```\r\n\r\nThe `CopyAllAction` class\r\n\r\n``` php\r\nnamespace FlowerTemplate\\Action;\r\n\r\nuse CodeGenerator\\Action\\AbstractAction;\r\nuse CodeGenerator\\FileOperator\\CopyOperator;\r\n\r\nclass CopyAllAction extends AbstractAction\r\n{\r\n\tprotected function doExecute()\r\n\t{\r\n\t\t$copyOperator = new CopyOperator($this->io, (array) $this->config['tag.variable']);\r\n\r\n\t\t$copyOperator->copy($this->config['path.src'], $this->config['path.dest'], $this->config['replace']);\r\n\t}\r\n}\r\n```\r\n\r\nThese two class all very simple and follows single responsibility principle, we can organize our multiple actions in one controller like below:\r\n\r\n``` php\r\nclass Generate extends AbstractTaskController\r\n{\r\n\tpublic function execute()\r\n\t{\r\n\t\t$this->doAction(new Action\\CopyAllAction);\r\n\r\n\t\t$this->doAction(new Action\\ImportSqlAction);\r\n\r\n\t\t$this->doAction(new Action\\Github\\CloneSomeRepoAction);\r\n\r\n\t\t$this->doAction(new Action\\User\\CreateNewUserAction);\r\n\t}\r\n}\r\n```\r\n\r\nThe benefit of single action class is that we can re-use every classes in different task.\r\n\r\n### File Operation\r\n\r\n#### Operator classes\r\n\r\nWe provides two operators now, `copyOperator` help us copy codes and replace tag to variables,\r\n`convertOperator` help us copy code too, but replace variable by tags.\r\n\r\nJust new an instance and using copy method:\r\n\r\n``` php\r\n$copyOperator = new CopyOperator($this->io, array('{@', '@}'));\r\n\r\n$copyOperator->copy($src, $dest, $replaceArray);\r\n```\r\n\r\nThere will be more operator(eg: `databaseOperator`, `gitOperator`) in the future.\r\n\r\n#### Filesystem\r\n\r\nThere are three filesystem classes: `Path`, `File` and `Folder`, which extends from Joomla Filesystem package,\r\nplease see: https://github.com/joomla-framework/filesystem\r\n\r\nSimple usage:\r\n\r\n``` php\r\nnamespace CodeGenerator\\Filesystem;\r\n\r\nFilesystem\\Folder::copy($src, $dest);\r\nFilesystem\\Folder::move($src, $dest);\r\nFilesystem\\Folder::create($path);\r\nFilesystem\\Folder::delete($path);\r\n\r\nFilesystem\\File::copy($src, $dest);\r\nFilesystem\\File::move($src, $dest);\r\nFilesystem\\File::write($path, $buffer);\r\nFilesystem\\File::delete($path);\r\n\r\n// Replace / and \\ to DIRECTORY_SEPARATOR\r\n$path = Filesystem\\Path::clean($path);\r\n```\r\n\r\nSo you can using Filesystem classes in Action class to help you operate files and directories.\r\n\r\n### Create a new Task\r\n\r\nIf you want a new task controller, this will need some steps to create a task. The process not very easy,\r\nwe will make the process easier in the future.\r\n\r\n#### (1) Create a new Command\r\n\r\nCreate a command class in `src/CodeGenerator/Windwalker/Command/MyTask/MyTask.php`\r\n\r\n``` php\r\nnamespace CodeGenerator\\Windwalker\\Command\\MyTask;\r\n\r\nuse CodeGenerator\\Controller\\GeneratorController;\r\nuse CodeGenerator\\Windwalker\\IO;\r\nuse Joomla\\Console\\Command\\Command;\r\n\r\nclass MyTask extends Command\r\n{\r\n\tprotected $name = 'mytask';\r\n\r\n\tprotected $description = 'Desc of my task.';\r\n\r\n\tprotected $usage = 'mytask <cmd><tmpl-name></cmd> <option>[option]</option>';\r\n\r\n\tpublic function configure()\r\n\t{\r\n\t\tparent::configure();\r\n\t}\r\n\r\n\tprotected function doExecute()\r\n\t{\r\n\t\t$controller = new GeneratorController(new IO($this));\r\n\r\n\t\t$controller->setTask('mytask')->execute();\r\n\t}\r\n}\r\n```\r\n\r\nHow to use Joomla Console and Command? See: https://github.com/asika32764/joomla-framework-console\r\n\r\n#### (2) Register your command to application\r\n\r\nRegister this command in `src/CodeGenerator/Windwalker/Application::registerCommands()`\r\n\r\n``` php\r\nprotected function registerCommands()\r\n{\r\n    $this->addCommand(new Command\\Generate\\Generate);\r\n    $this->addCommand(new Command\\Init\\Init);\r\n    $this->addCommand(new Command\\Convert\\Convert);\r\n\r\n    // Add here\r\n    $this->addCommand(new Command\\MyTask\\Task);\r\n}\r\n```\r\n\r\nYou will get new help like this:\r\n\r\n```\r\nAvailable commands:\r\n\r\n  help            List all arguments and show usage & manual.\r\n\r\n  gen             Genarate operation.\r\n\r\n  tmpl-init       Init a new extension.\r\n\r\n  tmpl-convert    Convert a code folder back to a template.\r\n\r\n  mytask          Desc of my task.\r\n\r\n```\r\n\r\n#### (3) Create a new Task controller\r\n\r\nCreate a class in `src/FlowerTemplate/Task/MyTask.php`\r\n\r\n``` php\r\nnamespace FlowerTemplate\\Task;\r\n\r\nuse FlowerTemplate\\Action;\r\nuse CodeGenerator\\Controller\\TaskController;\r\n\r\nclass MyTask extends TaskController\r\n{\r\n\tpublic function execute()\r\n\t{\r\n\t\t$this->doAction(new Action\\CopyAllAction);\r\n\t}\r\n}\r\n```\r\n\r\nNow you can do some actions here.\r\n\r\n#### (4) Test your task\r\n\r\nTyping this command and you can go into your task controller:\r\n\r\n``` bash\r\nphp bin/generator mytask <arguments>\r\n```\r\n\r\n## Integrate To Your Project or Framework\r\n\r\nPHP Code Generator can integrate to any framework instead default Joomla Console Application. Just create an `IO` class\r\nto help PHP Code Generator input and output some information:\r\n\r\n``` php\r\nuse CodeGenerator\\IO\\IOInterface;\r\n\r\nclass MyIOAdapter implements IOInterface\r\n{\r\n    // Implelemt this interface\r\n}\r\n```\r\n\r\nThen use `GeneratorController` in your project entry (For example: Symfony Console):\r\n\r\n``` php\r\n$controller = new GeneratorController(new MyIOAdapter($input, $output));\r\n\r\n$controller->setTask($input->getArgument('task'))->execute();\r\n```\r\n\r\nOK it's very easy, have a good time in your code recipe.\r\n\r\n## Todo\r\n\r\n- DatabaseOperator\r\n- GitOperator\r\n- FtpOperator\r\n- UnitTest\r\n- Completed docblock\r\n- Easy to add task controller and command\r\n","google":"UA-48372917-1","note":"Don't delete this file! It's used internally to help with page regeneration."}